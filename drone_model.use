model DroneDeliveryModel

-- enumeration for states
enum Drone_State {Charged, Delivering, Discharged}
enum Receptacle_State {Free, Occupied}
enum Command_State {Created, Assigned, Delivered}

class Drone
	attributes
		capacity : Integer init = 0
		energy : Integer init = 3

	operations

		distancePoint(p:Point) : Integer = (self.position_drone.x - p.x).abs + (self.position_drone.y - p.y).abs;

		recharge ()
			begin
				self.energy := self.energy + 1;
				-- TODO test if energy <3 and maybe incremente time
			end
		move (newX : Integer, newY : Integer)
		begin
			declare point : Point;
			point := Point.allInstances().select(point | point.x = self.position_drone.x + newX and point.y = self.position_drone.y + newY)->asSequence()->first();
			delete (self,self.position_drone) from Position; 
			insert (self, point) into Position;
			self.energy := self.energy -1;
			
		end

end

class Point 
	attributes 
		x : Integer
		y : Integer	
	operations
		-- Manhattan distance between two points 
		distance(dest : Point ) : Integer =
			(self.x - dest.x).abs + (self.y - dest.y).abs

		-- check if there is a receptacle or a warehouse in the current point
		
end

class Warehouse end


class Receptacle < Point
    attributes
        capacity : Integer init = 0
        state : Receptacle_State init = Receptacle_State::Free

    operations 
    	-- All neighbours 
        neighbours() : Set(Box) =
            Box.allInstances() -> select (n | distance(n) < 3)

        -- Set receptacles' states
        setFree()
			begin
				self.state := Receptacle_State::Free;
			end
        setOccupied()
	    	begin
	    		self.state := Receptacle_State::Occupied;
			end

		-- Get distance from given drone
		distanceDrone(d : Drone) : Integer =
            (self.x-d.position_drone.x).abs + (self.y-d.position_drone.y).abs
		
end

class Command end

class Grid end

association Owner between 
	Warehouse[1] role warehouse;
	Grid[1] role grid;
end

association Location between 
	Receptacle[*] role receptacles;
	Grid[1] role grid;
end

association Destination between 
	Receptacle[1] role receptacle;
	Command[1] role cmd;
end

association Position between 
	Point[1] role position_drone;
	Drone[*] role drone_position;
end

association Delivery between 
	Receptacle[1] role receptacle;
	Drone[1] role deliver;
end

association Crew between 
	Warehouse[1] role warehouse;
	Drone[*] role drones;

end